'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var _arguments = arguments;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _ramda = require('ramda');

var _ramda2 = _interopRequireDefault(_ramda);

var toProxy = ['del', 'get', 'head', 'patch', 'post', 'put'];

// type Plugin = SuperAgent.Request -> SuperAgent.Request

// :: Plugin -> SuperAgent -> SuperAgent
//
// Given a plugin, returns a new SuperAgent request factory that installs the
// plugin in every request generated by the factory.
//
// If all you need is to use a plugin with an existing request, you may use
// request.use(plugin) instead.
//
var withPlugin = _ramda2['default'].curry(function (plugin, request) {
  var req = function req() {
    return request.apply(null, _arguments).use(plugin);
  };
  var f = function f(key) {
    return function () {
      return request[key].apply(null, _arguments).use(plugin);
    };
  };
  return _ramda2['default'].reduce(function (obj, key) {
    return _ramda2['default'].assoc(key, f(key), obj);
  })(req, toProxy);
});

// :: [Plugin] -> SuperAgent -> SuperAgent
//
// Returns a new SuperAgent request factory that installs all the given plugins
// on every request generated.
//
var withPlugins = _ramda2['default'].curry(function (plugins, request) {
  return withPlugin(_ramda2['default'].reduceRight(_ramda2['default'].compose, _ramda2['default'].identity, plugins), request);
});

var plugin = {
  // :: String -> Plugin
  //
  // Add the `X-Tenant` header with the specified plant to the request.
  //
  withPlant: function withPlant(plant) {
    return function (req) {
      req.set('X-Tenant', plant);
      return req;
    };
  },

  // :: String -> Plugin
  //
  // Prepend the given prefix to the url of the request.
  //
  withUrlPrefix: function withUrlPrefix(prefix) {
    return function (req) {
      req.url = prefix + req.url;
      return req;
    };
  },

  // :: String -> Plugin
  //
  // Add authorization to the request using the given bearer token.
  //
  bearerAuth: function bearerAuth(token) {
    return function (req) {
      req.set('Authorization', 'Bearer ' + token);
      return req;
    };
  }
};

exports['default'] = { withPlugin: withPlugin, withPlugins: withPlugins, plugin: plugin };
module.exports = exports['default'];